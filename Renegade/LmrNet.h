#pragma once

#include "Utils.h"

constexpr int LmrInputSize = 8;
constexpr int LmrL1 = 16;
constexpr int LmrL2 = 8;

struct LMRNet {
	std::array<std::array<float, LmrL1>, LmrInputSize> InputWeights;
	std::array<float, LmrL1> InputBiases;

	std::array<std::array<float, LmrL2>, LmrL1> L1Weights;
	std::array<float, LmrL2> L1Biases;

	std::array<float, LmrL2> L2Weights;
	float L2Bias;

	// ["depth", "moveCount", "pvNode", "ttPV", "cutNode", "historyScore", "evalDiff1", "evalDiff2"]
	int Calculate(const int depth, const int moveCount, const bool pvNode, const bool ttPV, const bool cutNode,
		const int historyScore, const int ed1, const int ed2) {

		
		
		const std::array<float, LmrInputSize> inputs = { depth, moveCount, pvNode, ttPV, cutNode, historyScore, ed1, ed2 };

	}
};

LMRNet InitLmrNet() {
	LMRNet net{};

	net.InputWeights[0] = { -0.8346155, -0.25222892, 0.40668115, -0.22907536, -0.67096287, 0.08338036, -0.1895685, 0.05874269, 0.5130585, 0.24440804, 0.11781305, -0.2697853, 0.35072178, 0.08177593, 0.029786838, 0.019888949 };
	net.InputWeights[1] = { 0.060972076, -0.33470148, 0.2020818, -0.31760252, 0.09309656, 0.09094952, 0.31500822, -0.36189812, 0.23093893, 0.2527703, -0.5059189, 0.17195553, -0.3342673, 0.26267388, 0.15549798, -0.31811 };
	net.InputWeights[2] = { 0.4718418, 0.29119372, 0.2875328, -0.3313831, 0.53888816, 0.19446084, 0.320535, -0.30971718, 0.35935542, -0.13691835, 0.03940739, -0.3006429, 0.18048812, 0.024510063, -0.37289095, 0.2005917 };
	net.InputWeights[3] = { -0.11755518, -0.43803608, -0.25501102, -0.34211433, -0.22414283, 0.4148228, 0.27524197, 0.18143551, -0.008449637, 0.20973167, 0.44483885, 0.17545368, 0.15091775, -0.017080138, -0.6492344, 0.089061104 };
	net.InputWeights[4] = { 0.3839142, 0.19730964, 0.056352656, 0.19938146, 0.4114106, -0.7184597, -0.5615284, -0.16449606, 0.33052576, 0.18866283, 0.44784814, -0.04542596, -0.38096198, 0.13755961, 0.009612068, -0.3649501 };
	net.InputWeights[5] = { 0.25176087, 0.3168047, 0.77650845, -0.02524928, 0.20067804, -0.48525903, 0.93594027, -0.12737994, -0.54303926, -0.35524526, -0.011084051, 0.8943721, 0.052319385, 0.44531903, -0.57932377, -0.025282284 };
	net.InputWeights[6] = { 0.02125843, -0.10560382, -0.059456978, -0.13325156, 0.0879568, -0.05217597, -0.21593374, -0.36837098, -0.16460815, 0.25789878, -0.051013906, -0.034700755, -0.045086764, -0.1692286, -0.0065769334, 0.24816033 };
	net.InputWeights[7] = { 0.23705496, 0.03335547, -0.1192965, 0.122649424, 0.08329283, 0.379096, -0.028353458, 0.044240236, 0.008239925, -0.2988341, 0.017588705, -0.045356724, 0.61437064, -0.0017884354, -0.04265707, -0.20914178 };
	net.InputBiases = { 0.14961973, -0.12943485, -0.26096863, -0.07525453, -0.037376948, 0.2367081, -0.3446838, -0.0437123, 0.071047135, 0.1224275, 0.15459414, -0.007999437, 0.4073145, 0.01044767, 0.11509461, 0.7493497 };

	net.L1Weights[0] = { -1.3328612, -0.041421648, 0.18929508, 0.085587375, 0.66655403, 0.4234979, -1.4201334, -0.18187305 };
	net.L1Weights[1] = { -0.374662, -0.24238756, -0.21874698, -0.32145283, -0.32218343, 0.19682358, 0.28482047, 0.094037704 };
	net.L1Weights[2] = { -0.25779742, -0.120990686, 0.22516902, 0.28902045, 0.25752428, -0.29238516, -0.36516684, -0.4396519 };
	net.L1Weights[3] = { -0.2902697, -0.22482593, 0.20983624, -0.35100648, 0.123248495, 0.41681734, -0.37273383, 0.3991226 };
	net.L1Weights[4] = { 0.24338451, 0.5294072, 0.05805938, 0.042703077, 0.8432934, 0.8743477, -0.338935, 0.045844093 };
	net.L1Weights[5] = { 0.4186745, -0.625131, -0.48635304, -0.20261204, -0.3426648, 0.26774308, 0.3015703, 0.1881398 };
	net.L1Weights[6] = { -0.089539625, 0.5797932, 0.16932291, 0.5495468, 0.3771672, -0.13959113, -0.36993384, 0.14332671 };
	net.L1Weights[7] = { -0.09563062, 0.109060526, 0.033768088, -0.4382826, 0.2637328, -0.2399187, 0.42760074, 0.108730815 };
	net.L1Weights[8] = { 0.46950078, -0.39109343, 0.18769826, 0.33240202, -0.66361666, -0.46324047, 0.19569309, 0.19264127 };
	net.L1Weights[9] = { -0.16266178, 0.15613078, 0.069031894, -0.3028532, -0.3925048, -0.15792273, 0.47352442, 0.48105365 };
	net.L1Weights[10] = { -0.5520077, 0.01928537, 0.9126649, 0.5038447, 0.7727971, 0.21607822, -1.425809, -0.48141432 };
	net.L1Weights[11] = { -0.20833085, 0.7665555, 0.6020504, -0.027795238, 0.80018103, 0.30794227, -0.950752, 0.014858434 };
	net.L1Weights[12] = { -0.50733393, 0.29783627, -0.16215093, -0.27008197, 0.49772173, 0.56757635, -0.19094764, 0.058873437 };
	net.L1Weights[13] = { -0.45048657, 0.48693272, 0.18070915, 0.42005882, 0.15836771, 0.30007166, 0.30279672, 0.43138438 };
	net.L1Weights[14] = { 0.71811694, -0.3594089, 0.28247282, -0.64296603, -0.44522095, -0.13091809, -0.077481054, 0.47316027 };
	net.L1Weights[15] = { 0.03516655, 0.277472, 0.54091644, 0.16000631, 0.4960061, 0.21555223, -0.60954213, -0.26714134 };
	net.L1Biases = {0.19347304, -0.14002493, -0.21973288, -0.15553062, 0.062366456, 0.5188751, 0.1387548, 0.15627691};

	net.L2Weights[0] = 0.7841571;
	net.L2Weights[1] = -0.6050712;
	net.L2Weights[2] = -0.07691283;
	net.L2Weights[3] = -0.33608943;
	net.L2Weights[4] = 0.94578487;
	net.L2Weights[5] = -0.7728553;
	net.L2Weights[6] = 0.99526477;
	net.L2Weights[7] = 0.60876656;
	net.L2Bias = 0.14279474;

	return net;
}