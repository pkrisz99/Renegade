#pragma once

#include "Utils.h"

constexpr int LmrInputSize = 8;
constexpr int LmrL1 = 16;
constexpr int LmrL2 = 8;

struct LMRNet {
	std::array<std::array<float, LmrL1>, LmrInputSize> InputWeights;
	std::array<float, LmrL1> InputBiases;

	std::array<std::array<float, LmrL2>, LmrL1> L1Weights;
	std::array<float, LmrL2> L1Biases;

	std::array<float, LmrL2> L2Weights;
	float L2Bias;

	// ["depth", "moveCount", "pvNode", "ttPV", "cutNode", "historyScore", "evalDiff1", "evalDiff2"]
	int Calculate(const int depth, const int moveCount, const bool pvNode, const bool ttPV, const bool cutNode,
		const int historyScore, const int ed1, const int ed2) {


		auto Sigmoid = [](const float x) {
			return 1.f / (1.f + std::exp(-x));
			};

		const std::array<float, LmrInputSize> inputs = {
			std::log(static_cast<float>(depth)),
			std::log(static_cast<float>(moveCount)),
			static_cast<float>(pvNode), 
			static_cast<float>(ttPV),
			static_cast<float>(cutNode),
			Sigmoid(static_cast<float>(historyScore) / 20000),
			Sigmoid(static_cast<float>(ed1) / 32),
			Sigmoid(static_cast<float>(ed2) / 128)
		};

		//const std::array<float, LmrInputSize> inputs = { 1.f, 1.f, 1.f, 1.f, 1.f, 1.f, 1.f, 1.f }; //[[0.00764728]]

		auto Activation = [](const float value) {
			return std::max(value, 0.f);
		};

		std::array<float, LmrL1> l1 = InputBiases;
		for (int i = 0; i < LmrInputSize; i++) {
			for (int j = 0; j < LmrL1; j++) {
				l1[j] = std::fma(InputWeights[i][j], inputs[i], l1[j]);
			}
		}
		for (int i = 0; i < LmrL1; i++) l1[i] = Activation(l1[i]);


		std::array<float, LmrL2> l2 = L1Biases;
		for (int i = 0; i < LmrL1; i++) {
			for (int j = 0; j < LmrL2; j++) {
				l2[j] = std::fma(L1Weights[i][j], l1[i], l2[j]);
			}
		}
		for (int i = 0; i < LmrL2; i++) l2[i] = Activation(l2[i]);

		float out = L2Bias;
		for (int i = 0; i < LmrL2; i++) {
			out = std::fma(L2Weights[i], l2[i], out);
		}

		return static_cast<int>(std::exp(out));
	}
};

static LMRNet InitLmrNet() {
	LMRNet net{};

	net.InputWeights[0] = { -0.12621132, 0.0420413, -0.42842245, -0.3824608, -0.18468773, 0.008701138, 0.31022033, 0.48528546, 0.0038098497, 0.33955774, -0.45216945, -0.08430068, 0.32740533, 0.34141737, -0.012962025, 0.64011765 };
	net.InputWeights[1] = { -0.022764523, 0.46062374, 0.40836772, 0.036495127, 0.3517091, 0.31511372, 0.17215735, -0.016030438, 0.16572753, -0.08904843, 0.016664643, -0.437689, 0.3716528, 0.020451825, 0.2988754, 0.020899666 };
	net.InputWeights[2] = { -0.20226498, -0.07700773, -0.19258921, -0.16252166, 0.3203744, -0.07018031, -0.13196595, 0.07326679, -0.026161728, 0.078211695, -0.5060263, 0.4300381, 0.011668792, -0.19250214, 0.31135532, -0.3121627 };
	net.InputWeights[3] = { -0.039349552, 0.011630787, 0.119308725, 0.104983546, -0.27460608, 0.04721462, -0.051589802, -0.33825797, -0.038614813, 0.39394575, 0.35629132, 0.080193356, 0.06694195, 0.17517899, -0.22736819, -0.2768108 };
	net.InputWeights[4] = { -0.07557331, 0.28995278, -0.4121965, -0.3428413, 0.0057210326, 0.15680791, -0.22457537, -0.2759094, -0.013709522, -0.18135853, -0.3950234, -0.1511484, 0.2937528, 0.11391957, 0.1400473, 0.39963382 };
	net.InputWeights[5] = { 1.3540902, -0.4777105, -0.49003872, 1.0886102, 0.6933257, -1.0367032, 0.37457433, -0.43250617, 0.7403151, 0.39838067, -0.31557044, 0.5708565, 0.5064802, -0.22889178, -0.76973444, -0.21079768 };
	net.InputWeights[6] = { 0.39944986, 0.1491709, -0.09726321, -0.0024498324, 0.28972247, 0.03952351, -0.0114638135, 0.5080011, -0.049917124, -0.076748475, 0.35485625, -0.043719366, 0.10808851, -0.023228943, 0.41098475, 0.44139075 };
	net.InputWeights[7] = { -0.2577486, -0.089000896, -0.05932769, 0.001736846, -0.2106999, -0.14305724, 0.0384356, -0.5518542, -0.38698512, -0.044664126, -0.21215439, -0.002878893, -0.133134, -0.4327093, -0.07294825, -0.19108598 };
	net.InputBiases = { 0.23638058, -0.009381141, -0.14735225, 0.14820406, -0.4042103, 0.038306333, -0.22210158, 0.49089494, -0.7539097, -0.21841319, 0.026922176, 0.45603716, -0.26938474, 0.15285394, 0.18938293, 0.09347831 };


	net.L1Weights[0] = { -0.24375536, 0.29696408, 0.44178316, 0.09331263, 0.015387313, 0.15841392, -0.14890091, -0.8640242 };
	net.L1Weights[1] = { -0.4205006, -0.12766866, 0.0036743153, -0.70082605, 0.32609856, 0.067612305, -0.26476443, 0.17194478 };
	net.L1Weights[2] = { -0.33633742, -0.7383657, -1.4095132, -0.5056772, 0.52766824, 0.105364665, 0.22847256, 0.07940373 };
	net.L1Weights[3] = { -0.051865015, 0.25291923, 0.6817622, 0.41496003, -0.590736, -0.26702142, -0.4046159, -1.3773693 };
	net.L1Weights[4] = { -0.32444435, 0.17841862, 0.2689613, -0.20689772, -0.6447772, -0.26507735, -0.122131936, -0.1992107 };
	net.L1Weights[5] = { -0.45964438, -0.5064122, -0.3329934, 0.087876424, -1.1945693, -0.22018863, 0.4050034, 0.17347617 };
	net.L1Weights[6] = { 0.020586552, 0.15037125, 0.2612248, -0.13608576, -0.40163726, 0.3633488, 0.08910692, -0.34381965 };
	net.L1Weights[7] = { -0.02546317, -0.5738377, 0.020601643, 0.57458705, 0.14066479, 0.07854664, -0.002432854, 0.21025449 };
	net.L1Weights[8] = { -0.44558248, 1.7885644, 0.5532074, -1.250515, -0.3653329, -1.5928222, 0.36042315, -1.9084846 };
	net.L1Weights[9] = { -0.3891608, 0.19793993, 0.29629943, -0.045635942, 0.10841672, -0.20434074, 0.429233, -0.086172394 };
	net.L1Weights[10] = { -0.35222387, 0.31578615, -0.26220223, -0.30470157, -0.11081624, 0.34972677, -0.15097763, 0.3623459 };
	net.L1Weights[11] = { -0.46471056, -0.11613189, 0.2245657, 0.1086809, -1.4966557, 0.45802352, 0.2656509, -0.9195849 };
	net.L1Weights[12] = { -0.1972078, 0.46764463, -0.24975379, -0.025678989, -0.4987147, -0.095928475, -0.48721427, 0.08512604 };
	net.L1Weights[13] = { 0.3063452, 0.27148172, 0.17348547, 0.24869992, -0.049488716, 0.46712056, 0.476998, 0.32258517 };
	net.L1Weights[14] = { -0.18217582, -0.26153457, -0.47855854, 0.008493335, -0.1955435, -0.037101343, -0.23710474, 0.4637085 };
	net.L1Weights[15] = { 0.30717003, 0.27667892, -0.27667663, -0.2514261, 0.44858366, 0.3612375, -0.47678205, 0.3052807 };
	net.L1Biases = { -0.09221987, -0.20691153, 0.019540448, 0.4839987, 0.23805283, 0.17791149, -0.081070684, 0.1325447 };


	net.L2Weights[0] = { 0.39567977 };
	net.L2Weights[1] = { -0.5144386 };
	net.L2Weights[2] = { 0.6030715 };
	net.L2Weights[3] = { -0.7507287 };
	net.L2Weights[4] = { -1.5250411 };
	net.L2Weights[5] = { 0.5097715 };
	net.L2Weights[6] = { 0.7458742 };
	net.L2Weights[7] = { 0.7691033 };
	net.L2Bias = 0.012798162;

	return net;
}